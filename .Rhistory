library(car)
library(MASS)
library(stats)
train = read.csv("train.csv")
#population densities (train$density_rural+train$density_suburban+train$density_urban)
densitytest = train$density_rural+train$density_suburban+train$density_urban #Aliased. Should remove 1 or collapse to categorical
sum(densitytest)
length(densitytest)
#marital status
marraigetest = train$married + train$single #All but 7 observations sum to 1. Treat as perfectly correlated
sum(marraigetest)
length(marraigetest)
#home ownership
hometest = train$homeowner+train$renter #around 350 people are neither homeowners nor renters; let's hang on to both variables
sum(hometest)
length(hometest)
#removing missing
train_no_na = train[complete.cases(train), ]
#Converting relevant variables to factors
cols1 = c(2,3,4,5,6,8,11,12,14:45,48)
train_no_na[cols1] = lapply(train_no_na[cols1], factor)
#removing aliased columns
train_no_na = train_no_na[,-which(names(train_no_na) %in% c("density_rural","single"))]
train_no_na$suppdem = ifelse(train_no_na$suppdem=="Y", 1, 0)
#took out density_rural, single, and homeowner
ols = lm(suppdem ~ ., data = train_no_na
)
vif(ols)
train$density_rural
train$density_rural+train$density_suburban
train$density_rural+train$density_suburban+train$density_urban
sum(densitytest)
length(densitytest)
sum(densitytest) = length(densitytest)
sum(densitytest) == length(densitytest)
sum(densitytest) == length(densitytest)
marriagetest = train$married + train$single
sum(marriagetest)
length(marriagetest)
sum(marriagetest)
train$married + train$single
sum(marriagetest)
sum(marriagetest)-length(marriagetest)
length(marriagetest)
train$married
train$married
marriagetest = train$married + train$single
max(marriagetest)
sum(marriagetest)==length(marriagetest)
full_model = glm(suppdem~ . , family = binomial(), data = train_convert_na)
train = read.csv("train.csv")
#population densities (train$density_rural+train$density_suburban+train$density_urban)
densitytest = train$density_rural+train$density_suburban+train$density_urban
#Aliased. Should remove 1 or collapse to categorical
sum(densitytest) == length(densitytest)
#marital status
marriagetest = train$married + train$single
#All but 7 observations sum to 1. Treat as perfectly correlated
max(marriagetest)
sum(marriagetest)==length(marriagetest)
#home ownership
hometest = train$homeowner+train$renter
#around 350 people are neither homeowners nor renters; let's hang on to both variables
sum(hometest)
length(hometest)
#removing missing
train_no_na = train[complete.cases(train), ]
#Converting relevant variables to factors
cols1 = c(2,3,4,5,6,8,11,12,14:45,48)
train_no_na[cols1] = lapply(train_no_na[cols1], factor)
#removing aliased columns
train_no_na = train_no_na[,-which(names(train_no_na) %in% c("density_rural","single"))]
train_no_na$suppdem = ifelse(train_no_na$suppdem=="Y", 1, 0)
#took out density_rural, single, and homeowner
ols = lm(suppdem ~ ., data = train_no_na)
vif(ols)
glm = glm(suppdem~ . , family = binomial(), data = train_no_na)
summary(glm)
na.convert.mean = function (frame)
{
vars <- names(frame)
if (!is.null(resp <- attr(attr(frame, "terms"), "response"))) {
vars <- vars[-resp]
x <- frame[[resp]]
pos <- is.na(x)
if (any(pos)) {
frame <- frame[!pos, , drop = FALSE]
warning(paste(sum(pos), "observations omitted due to missing values in the response"))
}
}
for (j in vars) {  #j is variable names
x <- frame[[j]]
pos <- is.na(x)
if (any(pos)) {
if (length(levels(x))) {   # factors
xx <- as.character(x)
xx[pos] <- "NA"
x <- factor(xx, exclude = NULL)
}
else if (is.matrix(x)) {   # matrices
ats <- attributes(x)
x.na <- 1*pos
#               x[pos] <- 0
w <- !pos
n <- nrow(x)
TT <- array(1, c(1, n))
xbar <- (TT %*% x)/(TT %*% w)
xbar <- t(TT) %*% xbar
x[pos] <- xbar[pos]
attributes(x) <- ats
attributes(x.na) <- ats
dimnames(x.na)[[2]]=paste(dimnames(x)[[2]],".na",sep='')
frame[[paste(j,".na",sep='')]] <- x.na
} else {   # ordinary numerical vector
ats <- attributes(x)
x[pos] <- mean(x[!pos])
#               x[pos] <- 0
x.na <- 1*pos
frame[[paste(j,".na",sep='')]] <- x.na
attributes(x) <- ats
}
frame[[j]] <- x
}
}
frame
}
train_convert_na = na.convert.mean(train)
#Converting relevant variables to factors
cols1 = c(2,3,4,5,6,8,11,12,14:45,48)
train_convert_na[cols1] = lapply(train_convert_na[cols1], factor)
#removing aliased columns
train_convert_na = train_convert_na[,-which(names(train_convert_na) %in% c("density_rural","single"))]
full_model = glm(suppdem~ . , family = binomial(), data = train_convert_na)
summary(glm_na_convert)
full_model_convert = glm(suppdem~ . , family = binomial(), data = train_convert_na)
summary(full_model_convert)
full_model_remove = glm(suppdem~ . , family = binomial(), data = train_no_na)
fullmodel_mean_convert = glm(suppdem~ . , family = binomial(), data = train_convert_na)
summary(fullmodel_mean_convert)
summary(glm)
train
is.na(train)
colSums(is.na(train))
colnames(train)[colSums(is.na(train)) > 0]
dim(train)
